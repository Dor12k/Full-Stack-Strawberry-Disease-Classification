"""
Django settings for backend_main project.

Generated by 'django-admin startproject' using Django 5.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

import os
from pathlib import Path
from datetime import timedelta
from dotenv import load_dotenv

# === Paths ===
BASE_DIR = Path(__file__).resolve().parent.parent

# === Load .env for local development only ===
load_dotenv(dotenv_path=BASE_DIR / ".env")

# === Environment Variables ===

# Required
SECRET_KEY = os.environ.get("SECRET_KEY")
if not SECRET_KEY:
    raise ValueError("SECRET_KEY environment variable is not set!")

# Optional
DEBUG = os.environ.get("DEBUG", "False") == "True"

# Feature flags
ENABLE_RECENT_IMAGES_FEATURE = os.environ.get("ENABLE_RECENT_IMAGES_FEATURE", "False") == "True"

# Example of other variables
ALLOWED_HOSTS = os.environ.get("ALLOWED_HOSTS", "localhost").split(",")


ALLOWED_HOSTS = ['www.aistrawberries.com', 'aistrawberries.com', '*']

CSRF_TRUSTED_ORIGINS = ['https://www.aistrawberries.com', 'https://aistrawberries.com']


# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    
    'rest_framework',
    'accounts',
    'article',
    'api',
    'corsheaders',
    'rest_framework_simplejwt',
    'classification',

    'storages',


]

MIDDLEWARE = [
    
    'corsheaders.middleware.CorsMiddleware',

    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'backend_main.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'backend_main.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

'''
# SQLite
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}
'''



# PostgreSQL Database
DATABASES = {

    'default': {

        'ENGINE': 'django.db.backends.postgresql_psycopg2',

        'NAME': os.getenv('DB_NAME'), # - Enter your database name HERE

        'USER': os.getenv('DB_USER'), # - Enter your User HERE

        'PASSWORD': os.getenv('DB_PASSWORD'), # - Enter your RDS password HERE

        'HOST' : os.getenv('DB_HOST'), # - Enter your RDS host name HERE

        'PORT': '5432',
    }
}






# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/





# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# Configuration Cors-Headers 
CORS_ALLOWED_ORIGINS = [
    'http://localhost:5173'
]

# Configuration djangorestframework-simplejwt 
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    )
}


# Set token timer
SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=65),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=1),
}


AUTH_USER_MODEL = 'accounts.CustomUser'


CORS_ALLOWED_ORIGINS = [
    "http://localhost:5173",  
]


# Redis configuration
REDIS_HOST = 'localhost'
REDIS_PORT = 6379



# Amazon S3 configuration 
AWS_ACCESS_KEY_ID = os.environ.get('AWS_ACCESS_KEY_ID', '')
AWS_SECRET_ACCESS_KEY = os.environ.get('AWS_SECRET_ACCESS_KEY', '')
AWS_STORAGE_BUCKET_NAME = os.environ.get('AWS_STORAGE_BUCKET_NAME', '')

# Django 4.2 >
STORAGES = {
            "staticfiles": {"BACKEND": "backend_main.custom_storages.StaticFilesStorage"},
            "default": {"BACKEND": "backend_main.custom_storages.MediaFilesStorage"},
            }


AWS_S3_CUSTOM_DOMAIN = f"{AWS_STORAGE_BUCKET_NAME}.s3.amazonaws.com"

# static files
STATIC_URL = f"https://{AWS_S3_CUSTOM_DOMAIN}/static/"

# media files
MEDIA_URL = f"https://{AWS_S3_CUSTOM_DOMAIN}/media/"

